{"version":3,"file":"sqs-producer.js","sourceRoot":"","sources":["../src/sqs-producer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as aws from 'aws-sdk';\nimport { PromiseResult } from 'aws-sdk/lib/request';\nimport { v4 as uuid } from 'uuid';\nimport { S3PayloadMeta } from './types';\nimport {\n    buildS3PayloadWithExtendedCompatibility,\n    buildS3Payload,\n    createExtendedCompatibilityAttributeMap,\n} from './util';\n\n// 256KiB\nexport const DEFAULT_MAX_SQS_MESSAGE_SIZE = 256 * 1024;\n\nexport interface SqsProducerOptions {\n    queueUrl: string;\n    region?: string;\n    largePayloadThoughS3?: boolean;\n    allPayloadThoughS3?: boolean;\n    s3Bucket?: string;\n    sqs?: aws.SQS;\n    s3?: aws.S3;\n    sqsEndpointUrl?: string;\n    s3EndpointUrl?: string;\n    messageSizeThreshold?: number;\n    // Opt-in to enable compatibility with\n    // Amazon SQS Extended Client Java Library (and other compatible libraries)\n    extendedLibraryCompatibility?: boolean;\n}\n\nexport interface SqsMessageOptions {\n    DelaySeconds?: number;\n    MessageDeduplicationId?: string;\n    MessageGroupId?: string;\n}\n\nexport class SqsProducer {\n    private sqs: aws.SQS;\n    private s3: aws.S3;\n    private queueUrl: string;\n    private largePayloadThoughS3: boolean;\n    private allPayloadThoughS3: boolean;\n    private s3Bucket: string;\n    private messageSizeThreshold: number;\n    private extendedLibraryCompatibility: boolean;\n\n    constructor(options: SqsProducerOptions) {\n        if (options.sqs) {\n            this.sqs = options.sqs;\n        } else {\n            this.sqs = new aws.SQS({\n                region: options.region,\n                endpoint: options.sqsEndpointUrl,\n            });\n        }\n        if (options.largePayloadThoughS3 || options.allPayloadThoughS3) {\n            if (!options.s3Bucket) {\n                throw new Error(\n                    'Need to specify \"s3Bucket\" option when using allPayloadThoughS3 or  largePayloadThoughS3.'\n                );\n            }\n            if (options.s3) {\n                this.s3 = options.s3;\n            } else {\n                this.s3 = new aws.S3({\n                    region: options.region,\n                    endpoint: options.s3EndpointUrl,\n                });\n            }\n        }\n\n        this.queueUrl = options.queueUrl;\n        this.largePayloadThoughS3 = options.largePayloadThoughS3;\n        this.allPayloadThoughS3 = options.allPayloadThoughS3;\n        this.s3Bucket = options.s3Bucket;\n        this.messageSizeThreshold = options.messageSizeThreshold ?? DEFAULT_MAX_SQS_MESSAGE_SIZE;\n        this.extendedLibraryCompatibility = options.extendedLibraryCompatibility;\n    }\n\n    static create(options: SqsProducerOptions): SqsProducer {\n        return new SqsProducer(options);\n    }\n\n    async sendJSON(message: unknown, options: SqsMessageOptions = {}): Promise<any> {\n        const messageBody = JSON.stringify(message);\n        const msgSize = Buffer.byteLength(messageBody, 'utf-8');\n\n        if ((msgSize > this.messageSizeThreshold && this.largePayloadThoughS3) || this.allPayloadThoughS3) {\n            const payloadId = uuid();\n            const payloadKey = `${payloadId}.json`;\n            const s3Response = await this.s3\n                .upload({\n                    Bucket: this.s3Bucket,\n                    Body: messageBody,\n                    Key: payloadKey,\n                    ContentType: 'application/json',\n                })\n                .promise();\n\n            const sqsResponse = await this.sendS3Payload(\n                {\n                    Id: payloadId,\n                    Bucket: s3Response.Bucket,\n                    Key: s3Response.Key,\n                    Location: s3Response.Location,\n                },\n                msgSize,\n                options\n            );\n\n            return {\n                s3Response,\n                sqsResponse,\n            };\n        } else if (msgSize > this.messageSizeThreshold) {\n            throw new Error(\"Message is too big. Use 'largePayloadThoughS3' option to send large payloads though S3.\");\n        }\n\n        const sqsResponse = await this.sqs\n            .sendMessage({\n                QueueUrl: this.queueUrl,\n                MessageBody: messageBody,\n                DelaySeconds: options.DelaySeconds,\n                MessageDeduplicationId: options.MessageDeduplicationId,\n                MessageGroupId: options.MessageGroupId,\n            })\n            .promise();\n\n        return {\n            sqsResponse,\n        };\n    }\n\n    // send a message into the queue with payload which is already in s3.\n    // for example: can be used to resend an unmodified message received via this lib from a queue\n    // into another queue without duplicating the s3 object\n    async sendS3Payload(\n        s3PayloadMeta: S3PayloadMeta,\n        msgSize: number,\n        options: SqsMessageOptions = {}\n    ): Promise<PromiseResult<aws.SQS.SendMessageResult, aws.AWSError>> {\n        const messageAttributes = this.extendedLibraryCompatibility\n            ? createExtendedCompatibilityAttributeMap(msgSize)\n            : {};\n        return await this.sqs\n            .sendMessage({\n                QueueUrl: this.queueUrl,\n                MessageBody: this.extendedLibraryCompatibility\n                    ? buildS3PayloadWithExtendedCompatibility(s3PayloadMeta)\n                    : buildS3Payload(s3PayloadMeta),\n                DelaySeconds: options.DelaySeconds,\n                MessageDeduplicationId: options.MessageDeduplicationId,\n                MessageGroupId: options.MessageGroupId,\n                MessageAttributes: messageAttributes,\n            })\n            .promise();\n    }\n}\n"]}
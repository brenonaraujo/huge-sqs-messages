{"version":3,"file":"sns-producer.js","sourceRoot":"","sources":["../src/sns-producer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as aws from 'aws-sdk';\nimport { PromiseResult } from 'aws-sdk/lib/request';\nimport { v4 as uuid } from 'uuid';\nimport { S3PayloadMeta } from './types';\nimport {\n    buildS3PayloadWithExtendedCompatibility,\n    buildS3Payload,\n    createExtendedCompatibilityAttributeMap,\n} from './util';\n\nexport interface SnsProducerOptions {\n    topicArn?: string;\n    region?: string;\n    largePayloadThoughS3?: boolean;\n    allPayloadThoughS3?: boolean;\n    s3Bucket?: string;\n    sns?: aws.SNS;\n    s3?: aws.S3;\n    snsEndpointUrl?: string;\n    s3EndpointUrl?: string;\n    messageSizeThreshold?: number;\n    // Opt-in to enable compatibility with\n    // Amazon SQS Extended Client Java Library (and other compatible libraries)\n    extendedLibraryCompatibility?: boolean;\n}\n\nexport interface PublishResult {\n    snsResponse: any;\n    s3Response?: any;\n}\n\n// https://aws.amazon.com/sns/pricing/\n// Amazon SNS currently allows a maximum size of 256 KB for published messages.\nexport const DEFAULT_MAX_SNS_MESSAGE_SIZE = 256 * 1024;\n\nexport class SnsProducer {\n    private topicArn: string;\n    private sns: aws.SNS;\n    private s3: aws.S3;\n    private largePayloadThoughS3: boolean;\n    private allPayloadThoughS3: boolean;\n    private s3Bucket: string;\n    private messageSizeThreshold: number;\n    private extendedLibraryCompatibility: boolean;\n\n    constructor(options: SnsProducerOptions) {\n        if (options.sns) {\n            this.sns = options.sns;\n        } else {\n            this.sns = new aws.SNS({\n                region: options.region,\n                endpoint: options.snsEndpointUrl,\n            });\n        }\n        if (options.allPayloadThoughS3 || options.largePayloadThoughS3) {\n            if (!options.s3Bucket) {\n                throw new Error(\n                    'Need to specify \"s3Bucket\" option when using allPayloadThoughS3 or  largePayloadThoughS3.'\n                );\n            }\n\n            if (options.s3) {\n                this.s3 = options.s3;\n            } else {\n                this.s3 = new aws.S3({\n                    region: options.region,\n                    endpoint: options.s3EndpointUrl,\n                });\n            }\n        }\n\n        this.topicArn = options.topicArn;\n        this.largePayloadThoughS3 = options.largePayloadThoughS3;\n        this.allPayloadThoughS3 = options.allPayloadThoughS3;\n        this.s3Bucket = options.s3Bucket;\n        this.messageSizeThreshold = options.messageSizeThreshold ?? DEFAULT_MAX_SNS_MESSAGE_SIZE;\n        this.extendedLibraryCompatibility = options.extendedLibraryCompatibility;\n    }\n\n    public static create(options: SnsProducerOptions): SnsProducer {\n        return new SnsProducer(options);\n    }\n\n    async publishJSON(message: unknown): Promise<PublishResult> {\n        const messageBody = JSON.stringify(message);\n        const msgSize = Buffer.byteLength(messageBody, 'utf-8');\n\n        if ((msgSize > this.messageSizeThreshold && this.largePayloadThoughS3) || this.allPayloadThoughS3) {\n            const payloadId = uuid();\n            const payloadKey = `${payloadId}.json`;\n            const s3Response = await this.s3\n                .upload({\n                    Bucket: this.s3Bucket,\n                    Body: messageBody,\n                    Key: payloadKey,\n                    ContentType: 'application/json',\n                })\n                .promise();\n\n            const snsResponse = await this.publishS3Payload(\n                {\n                    Id: payloadId,\n                    Bucket: s3Response.Bucket,\n                    Key: s3Response.Key,\n                    Location: s3Response.Location,\n                },\n                msgSize\n            );\n\n            return {\n                s3Response,\n                snsResponse,\n            };\n        } else if (msgSize > this.messageSizeThreshold) {\n            throw new Error(\n                `Message is too big (${msgSize} > ${this.messageSizeThreshold}). Use 'largePayloadThoughS3' option to send large payloads though S3.`\n            );\n        }\n\n        const snsResponse = await this.sns\n            .publish({\n                Message: messageBody,\n                TopicArn: this.topicArn,\n            })\n            .promise();\n\n        return {\n            snsResponse,\n        };\n    }\n\n    async publishS3Payload(\n        s3PayloadMeta: S3PayloadMeta,\n        msgSize: number\n    ): Promise<PromiseResult<aws.SNS.PublishResponse, aws.AWSError>> {\n        const messageAttributes = this.extendedLibraryCompatibility\n            ? createExtendedCompatibilityAttributeMap(msgSize)\n            : {};\n        return await this.sns\n            .publish({\n                Message: this.extendedLibraryCompatibility\n                    ? buildS3PayloadWithExtendedCompatibility(s3PayloadMeta)\n                    : buildS3Payload(s3PayloadMeta),\n                TopicArn: this.topicArn,\n                MessageAttributes: messageAttributes,\n            })\n            .promise();\n    }\n}\n"]}
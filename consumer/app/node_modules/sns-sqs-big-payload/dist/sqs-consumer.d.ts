import * as aws from 'aws-sdk';
import { Message } from 'aws-sdk/clients/sqs';
import { S3PayloadMeta } from './types';
export interface SqsConsumerOptions {
    queueUrl: string;
    region?: string;
    batchSize?: number;
    waitTimeSeconds?: number;
    getPayloadFromS3?: boolean;
    sqs?: aws.SQS;
    s3?: aws.S3;
    sqsEndpointUrl?: string;
    s3EndpointUrl?: string;
    handleMessage?(message: SqsMessage): Promise<void>;
    handleBatch?(messages: SqsMessage[]): Promise<Message[] | void>;
    parsePayload?(payload: any): any;
    transformMessageBody?(messageBody: any): any;
    extendedLibraryCompatibility?: boolean;
}
export interface ProcessingOptions {
    deleteAfterProcessing?: boolean;
}
export declare enum SqsConsumerEvents {
    started = "started",
    messageReceived = "message-received",
    messageParsed = "message-parsed",
    messageProcessed = "message-processed",
    batchProcessed = "batch-processed",
    stopped = "stopped",
    pollEnded = "poll-ended",
    error = "error",
    s3PayloadError = "s3-payload-error",
    processingError = "processing-error",
    connectionError = "connection-error",
    payloadParseError = "payload-parse-error"
}
export interface SqsMessage {
    payload: any;
    message: Message;
    s3PayloadMeta: S3PayloadMeta;
}
export declare class SqsConsumer {
    private sqs;
    private s3;
    private queueUrl;
    private getPayloadFromS3;
    private batchSize;
    private waitTimeSeconds;
    private started;
    private events;
    private connErrorTimeout;
    private handleMessage?;
    private handleBatch?;
    private parsePayload?;
    private transformMessageBody?;
    private extendedLibraryCompatibility;
    constructor(options: SqsConsumerOptions);
    static create(options: SqsConsumerOptions): SqsConsumer;
    start(): void;
    stop(): void;
    on(event: string | symbol, handler: (...args: any) => void): void;
    processMessage(message: Message, options: ProcessingOptions): Promise<void>;
    private poll;
    private isConnError;
    private handleSqsResponse;
    private processBatch;
    private preparePayload;
    private processMsg;
    private getMessagePayload;
    private parseMessagePayload;
    private receiveMessages;
    private deleteMessage;
    private deleteBatch;
}

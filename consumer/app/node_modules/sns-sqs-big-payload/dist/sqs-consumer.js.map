{"version":3,"file":"sqs-consumer.js","sourceRoot":"","sources":["../src/sqs-consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as aws from 'aws-sdk';\nimport { EventEmitter } from 'events';\nimport { Message, MessageBodyAttributeMap, ReceiveMessageRequest, ReceiveMessageResult } from 'aws-sdk/clients/sqs';\nimport { AWSError } from 'aws-sdk';\nimport { PayloadMeta, S3PayloadMeta, SqsExtendedPayloadMeta } from './types';\nimport { SQS_LARGE_PAYLOAD_SIZE_ATTRIBUTE } from './util';\n\nexport interface SqsConsumerOptions {\n    queueUrl: string;\n    region?: string;\n    batchSize?: number;\n    waitTimeSeconds?: number;\n    getPayloadFromS3?: boolean;\n    sqs?: aws.SQS;\n    s3?: aws.S3;\n    sqsEndpointUrl?: string;\n    s3EndpointUrl?: string;\n    handleMessage?(message: SqsMessage): Promise<void>;\n    handleBatch?(messages: SqsMessage[]): Promise<Message[]|void>;\n    parsePayload?(payload: any): any;\n    transformMessageBody?(messageBody: any): any;\n    // Opt-in to enable compatibility with\n    // Amazon SQS Extended Client Java Library (and other compatible libraries)\n    extendedLibraryCompatibility?: boolean;\n}\n\nexport interface ProcessingOptions {\n    deleteAfterProcessing?: boolean;\n}\n\nexport enum SqsConsumerEvents {\n    started = 'started',\n    messageReceived = 'message-received',\n    messageParsed = 'message-parsed',\n    messageProcessed = 'message-processed',\n    batchProcessed = 'batch-processed',\n    stopped = 'stopped',\n    pollEnded = 'poll-ended',\n    error = 'error',\n    s3PayloadError = 's3-payload-error',\n    processingError = 'processing-error',\n    connectionError = 'connection-error',\n    payloadParseError = 'payload-parse-error',\n}\n\nexport interface SqsMessage {\n    payload: any;\n    message: Message;\n    s3PayloadMeta: S3PayloadMeta;\n}\n\nexport class SqsConsumer {\n    private sqs: aws.SQS;\n    private s3: aws.S3;\n    private queueUrl: string;\n    private getPayloadFromS3: boolean;\n    private batchSize: number;\n    private waitTimeSeconds: number;\n    private started = false;\n    private events = new EventEmitter();\n    private connErrorTimeout = 10000;\n    private handleMessage?: (message: SqsMessage) => Promise<void>;\n    private handleBatch?: (messagesWithPayload: SqsMessage[]) => Promise<Message[]|void>;\n    private parsePayload?: (payload: any) => any;\n    private transformMessageBody?: (messageBody: any) => any;\n    private extendedLibraryCompatibility: boolean;\n\n    constructor(options: SqsConsumerOptions) {\n        if (options.sqs) {\n            this.sqs = options.sqs;\n        } else {\n            this.sqs = new aws.SQS({\n                region: options.region,\n                endpoint: options.sqsEndpointUrl,\n            });\n        }\n        if (options.getPayloadFromS3) {\n            if (options.s3) {\n                this.s3 = options.s3;\n            } else {\n                this.s3 = new aws.S3({\n                    region: options.region,\n                    endpoint: options.s3EndpointUrl,\n                });\n            }\n        }\n\n        this.queueUrl = options.queueUrl;\n        this.getPayloadFromS3 = options.getPayloadFromS3;\n        this.batchSize = options.batchSize || 10;\n        this.waitTimeSeconds = options.waitTimeSeconds || 20;\n        this.handleMessage = options.handleMessage;\n        this.handleBatch = options.handleBatch;\n        this.parsePayload = options.parsePayload;\n        this.transformMessageBody = options.transformMessageBody;\n        this.extendedLibraryCompatibility = options.extendedLibraryCompatibility;\n    }\n\n    static create(options: SqsConsumerOptions): SqsConsumer {\n        return new SqsConsumer(options);\n    }\n\n    start(): void {\n        if (this.started) return;\n        this.started = true;\n        this.poll();\n        this.events.emit(SqsConsumerEvents.started);\n    }\n\n    stop(): void {\n        this.started = false;\n        this.events.emit(SqsConsumerEvents.stopped);\n    }\n\n    on(event: string | symbol, handler: (...args: any) => void): void {\n        this.events.on(event, handler);\n    }\n\n    async processMessage(message: Message, options: ProcessingOptions): Promise<void> {\n        await this.processMsg(message, options);\n    }\n\n    private async poll() {\n        while (this.started) {\n            try {\n                const response = await this.receiveMessages({\n                    QueueUrl: this.queueUrl,\n                    MaxNumberOfMessages: this.batchSize,\n                    WaitTimeSeconds: this.waitTimeSeconds,\n                    MessageAttributeNames: [SQS_LARGE_PAYLOAD_SIZE_ATTRIBUTE],\n                });\n                if (!this.started) return;\n                await this.handleSqsResponse(response);\n            } catch (err) {\n                if (this.isConnError(err)) {\n                    this.events.emit(SqsConsumerEvents.connectionError, err);\n                    await new Promise((resolve) => setTimeout(resolve, this.connErrorTimeout));\n                } else {\n                    this.events.emit(SqsConsumerEvents.error, err);\n                }\n            }\n            this.events.emit(SqsConsumerEvents.batchProcessed);\n        }\n        this.events.emit(SqsConsumerEvents.pollEnded);\n    }\n\n    private isConnError(err: AWSError): boolean {\n        return err.statusCode === 403 || err.code === 'CredentialsError' || err.code === 'UnknownEndpoint';\n    }\n\n    private async handleSqsResponse(result: ReceiveMessageResult): Promise<void> {\n        if (result && result.Messages) {\n            if (this.handleBatch) {\n                await this.processBatch(result.Messages);\n            } else {\n                await Promise.all(result.Messages.map((message) => this.processMsg(message)));\n            }\n        }\n    }\n\n    private async processBatch(messages: Message[]) {\n        try {\n            const messagesWithPayload = await Promise.all(messages.map(async message => {\n                const { payload, s3PayloadMeta } = await this.preparePayload(message);\n                const messageWithPayload = {\n                    message,\n                    payload,\n                    s3PayloadMeta,\n                };\n\n                return messageWithPayload;\n            }));\n\n            const messagesToDelete = await this.handleBatch(messagesWithPayload);\n            if (messagesToDelete && messagesToDelete?.length) \n                await this.deleteBatch(messagesToDelete);\n            else if (messagesToDelete === undefined)\n                await this.deleteBatch(messages);\n\n        } catch (err) {\n            this.events.emit(SqsConsumerEvents.processingError, { err, messages });\n        }\n    }\n\n    private async preparePayload(message: Message) {\n        const messageBody = this.transformMessageBody ? this.transformMessageBody(message.Body) : message.Body;\n        const { rawPayload, s3PayloadMeta } = await this.getMessagePayload(messageBody, message.MessageAttributes);\n        const payload = this.parseMessagePayload(rawPayload);\n\n        return {\n            payload,\n            s3PayloadMeta,\n        }\n    }\n\n    private async processMsg(\n        message: Message,\n        { deleteAfterProcessing = true }: ProcessingOptions = {}\n    ): Promise<void> {\n        try {\n            this.events.emit(SqsConsumerEvents.messageReceived, message);\n            const { payload, s3PayloadMeta } = await this.preparePayload(message);\n            this.events.emit(SqsConsumerEvents.messageParsed, {\n                message,\n                payload,\n                s3PayloadMeta,\n            });\n            if (this.handleMessage) {\n                await this.handleMessage({ payload, message, s3PayloadMeta });\n            }\n            if (deleteAfterProcessing) {\n                await this.deleteMessage(message);\n            }\n            this.events.emit(SqsConsumerEvents.messageProcessed, message);\n        } catch (err) {\n            this.events.emit(SqsConsumerEvents.processingError, { err, message });\n        }\n    }\n\n    private async getMessagePayload(\n        messageBody: any,\n        attributes: MessageBodyAttributeMap\n    ): Promise<{ rawPayload: any; s3PayloadMeta?: S3PayloadMeta }> {\n        if (!this.getPayloadFromS3) {\n            return { rawPayload: messageBody };\n        }\n        let s3PayloadMeta: S3PayloadMeta;\n        const s3Object: SqsExtendedPayloadMeta | PayloadMeta = JSON.parse(messageBody);\n        if (this.extendedLibraryCompatibility && attributes && attributes[SQS_LARGE_PAYLOAD_SIZE_ATTRIBUTE]) {\n            const msgJson = s3Object as SqsExtendedPayloadMeta;\n            s3PayloadMeta = {\n                Bucket: msgJson.s3BucketName,\n                Key: msgJson.s3Key,\n                Id: 'not available in extended compatibility mode',\n                Location: 'not available in extended compatibility mode',\n            };\n        } else {\n            const msgJson = s3Object as PayloadMeta;\n            s3PayloadMeta = msgJson?.S3Payload;\n        }\n        if (s3PayloadMeta) {\n            try {\n                const s3Response = await this.s3\n                    .getObject({ Bucket: s3PayloadMeta.Bucket, Key: s3PayloadMeta.Key })\n                    .promise();\n                return { rawPayload: s3Response.Body, s3PayloadMeta };\n            } catch (err) {\n                this.events.emit(SqsConsumerEvents.s3PayloadError, {\n                    err,\n                    message: s3Object,\n                });\n                throw err;\n            }\n        }\n\n        return { rawPayload: messageBody };\n    }\n\n    private parseMessagePayload(rawPayload: any) {\n        if (this.parsePayload) {\n            try {\n                const payload = this.parsePayload(rawPayload);\n                return payload;\n            } catch (err) {\n                this.events.emit(SqsConsumerEvents.payloadParseError, err);\n                throw err;\n            }\n        }\n\n        return rawPayload;\n    }\n\n    private async receiveMessages(params: ReceiveMessageRequest): Promise<ReceiveMessageResult> {\n        return await this.sqs.receiveMessage(params).promise();\n    }\n\n    private async deleteMessage(message: Message): Promise<void> {\n        await this.sqs\n            .deleteMessage({\n                QueueUrl: this.queueUrl,\n                ReceiptHandle: message.ReceiptHandle,\n            })\n            .promise();\n    }\n\n    private async deleteBatch(messages: Message[]): Promise<void> {\n        await this.sqs\n            .deleteMessageBatch({\n                QueueUrl: this.queueUrl,\n                Entries: messages.map((message, index) => ({\n                    Id: index.toString(),\n                    ReceiptHandle: message.ReceiptHandle,\n                })),\n            })\n            .promise();\n    }\n}\n"]}
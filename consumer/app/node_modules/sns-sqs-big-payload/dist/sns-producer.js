"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws = __importStar(require("aws-sdk"));
const uuid_1 = require("uuid");
const util_1 = require("./util");
// https://aws.amazon.com/sns/pricing/
// Amazon SNS currently allows a maximum size of 256 KB for published messages.
exports.DEFAULT_MAX_SNS_MESSAGE_SIZE = 256 * 1024;
class SnsProducer {
    constructor(options) {
        var _a;
        if (options.sns) {
            this.sns = options.sns;
        }
        else {
            this.sns = new aws.SNS({
                region: options.region,
                endpoint: options.snsEndpointUrl,
            });
        }
        if (options.allPayloadThoughS3 || options.largePayloadThoughS3) {
            if (!options.s3Bucket) {
                throw new Error('Need to specify "s3Bucket" option when using allPayloadThoughS3 or  largePayloadThoughS3.');
            }
            if (options.s3) {
                this.s3 = options.s3;
            }
            else {
                this.s3 = new aws.S3({
                    region: options.region,
                    endpoint: options.s3EndpointUrl,
                });
            }
        }
        this.topicArn = options.topicArn;
        this.largePayloadThoughS3 = options.largePayloadThoughS3;
        this.allPayloadThoughS3 = options.allPayloadThoughS3;
        this.s3Bucket = options.s3Bucket;
        this.messageSizeThreshold = (_a = options.messageSizeThreshold) !== null && _a !== void 0 ? _a : exports.DEFAULT_MAX_SNS_MESSAGE_SIZE;
        this.extendedLibraryCompatibility = options.extendedLibraryCompatibility;
    }
    static create(options) {
        return new SnsProducer(options);
    }
    async publishJSON(message) {
        const messageBody = JSON.stringify(message);
        const msgSize = Buffer.byteLength(messageBody, 'utf-8');
        if ((msgSize > this.messageSizeThreshold && this.largePayloadThoughS3) || this.allPayloadThoughS3) {
            const payloadId = uuid_1.v4();
            const payloadKey = `${payloadId}.json`;
            const s3Response = await this.s3
                .upload({
                Bucket: this.s3Bucket,
                Body: messageBody,
                Key: payloadKey,
                ContentType: 'application/json',
            })
                .promise();
            const snsResponse = await this.publishS3Payload({
                Id: payloadId,
                Bucket: s3Response.Bucket,
                Key: s3Response.Key,
                Location: s3Response.Location,
            }, msgSize);
            return {
                s3Response,
                snsResponse,
            };
        }
        else if (msgSize > this.messageSizeThreshold) {
            throw new Error(`Message is too big (${msgSize} > ${this.messageSizeThreshold}). Use 'largePayloadThoughS3' option to send large payloads though S3.`);
        }
        const snsResponse = await this.sns
            .publish({
            Message: messageBody,
            TopicArn: this.topicArn,
        })
            .promise();
        return {
            snsResponse,
        };
    }
    async publishS3Payload(s3PayloadMeta, msgSize) {
        const messageAttributes = this.extendedLibraryCompatibility
            ? util_1.createExtendedCompatibilityAttributeMap(msgSize)
            : {};
        return await this.sns
            .publish({
            Message: this.extendedLibraryCompatibility
                ? util_1.buildS3PayloadWithExtendedCompatibility(s3PayloadMeta)
                : util_1.buildS3Payload(s3PayloadMeta),
            TopicArn: this.topicArn,
            MessageAttributes: messageAttributes,
        })
            .promise();
    }
}
exports.SnsProducer = SnsProducer;
//# sourceMappingURL=sns-producer.js.map